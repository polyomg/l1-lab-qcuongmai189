package poly.edu.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import poly.edu.service.MailService;
import poly.edu.service.MailService.Mail;

import java.io.File;
import java.io.IOException;

@Controller
public class MailController {

    @Autowired
    MailService mailService;

    // üîπ Hi·ªÉn th·ªã form g·ª≠i mail
    @GetMapping("/mail/form")
    public String showForm(Model model) {
        model.addAttribute("mail", new Mail());
        return "mail/form";
    }

    // üîπ G·ª≠i mail tr·ª±c ti·∫øp
    @PostMapping("/mail/send-direct")
    public String sendDirect(@ModelAttribute Mail mail,
                             @RequestParam("attachments") MultipartFile[] attachments,
                             Model model) {
        try {
            StringBuilder filenames = new StringBuilder();

            // L∆∞u file upload t·∫°m th·ªùi
            for (MultipartFile file : attachments) {
                if (!file.isEmpty()) {
                    File savedFile = new File(System.getProperty("java.io.tmpdir"), file.getOriginalFilename());
                    file.transferTo(savedFile);
                    filenames.append(savedFile.getAbsolutePath()).append(";");
                }
            }

            mail.setFilenames(filenames.toString());
            mailService.send(mail);

            model.addAttribute("message", "‚úÖ Mail ƒë√£ ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp!");
        } catch (Exception e) {
            model.addAttribute("message", "‚ùå L·ªói khi g·ª≠i mail: " + e.getMessage());
        }
        return "mail/form";
    }

    // üîπ X·∫øp mail v√†o h√†ng ƒë·ª£i
    @PostMapping("/mail/send-queue")
    public String sendQueue(@ModelAttribute Mail mail,
                            @RequestParam("attachments") MultipartFile[] attachments,
                            Model model) {
        try {
            StringBuilder filenames = new StringBuilder();

            for (MultipartFile file : attachments) {
                if (!file.isEmpty()) {
                    File savedFile = new File(System.getProperty("java.io.tmpdir"), file.getOriginalFilename());
                    file.transferTo(savedFile);
                    filenames.append(savedFile.getAbsolutePath()).append(";");
                }
            }

            mail.setFilenames(filenames.toString());
            mailService.push(mail);

            model.addAttribute("message", "üì¨ Mail ƒë√£ ƒë∆∞·ª£c x·∫øp v√†o h√†ng ƒë·ª£i!");
        } catch (IOException e) {
            model.addAttribute("message", "‚ùå L·ªói khi x·ª≠ l√Ω file ƒë√≠nh k√®m: " + e.getMessage());
        }
        return "mail/form";
    }
}
